import { app, BrowserWindow, ipcMain } from "electron";
import contextMenu from "electron-context-menu";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const userDataPath = app.getPath("userData");
const appDirectory = `${userDataPath}`;
global.share = {
  ipcMain,
  appDirectory,
};
require("./ipc");

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const fs = require("fs");
fs.mkdir(appDirectory, { recursive: true }, (err: any) => {
  if (err) throw err;
  console.log(`Directory is created. ${userDataPath}`);
});

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 1600,
    height: 900,
    autoHideMenuBar: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  // Add an item to the context menu that appears only when you click on an image
  contextMenu({
    // prepend: (defaultActions, params) => [
    //   {
    //     label: "Rainbow",
    //     // Only show it when right-clicking images
    //     visible: params.mediaType === "canvas",
    //     // Click handler
    //     click: () => {
    //       console.log(params.srcURL);
    //     },
    //   },
    // ],
    shouldShowMenu(event, parameters) {
      if (parameters.mediaType === "canvas") {
        return false;
      }
    },
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
